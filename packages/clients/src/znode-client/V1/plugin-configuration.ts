//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
//import { CONFIG } from "constants/index";
const baseUrl = process.env.API_URL;
import { buildEndpointQueryString,getHeaders } from "./base";
import * as Models from "../../types/multifront-types";
import {FilterTuple} from "@znode/clients/v1";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

    /**
         * Creates the configuration with unique code with respect to plugin type.
         * @param body (optional) 
         * @return OK
         */
    
    export async function PluginConfiguration_configurationSetPost(body:Models.ConfigurationSetCreateRequest | undefined): Promise<any> {

        let url_ = baseUrl + "ConfigurationSet";

        url_ = url_.replace(/[?&]$/, "");

     const content_ = JSON.stringify(body);

         let options_: RequestInit = {
            body: content_,
            method: "POST",
            cache: "no-store",
            headers: await getHeaders("POST", String(baseUrl)),
        };

        return fetch(url_, options_).then((_response: Response) => {
   
            return PluginConfiguration_processConfigurationSetPost(_response);
        });
    }
   
   function PluginConfiguration_processConfigurationSetPost(response: Response): Promise<any> {
       const status = response.status;
       let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        result200 = _responseText === "" ? null : JSON.parse(_responseText) as Models.CreateConfigurationSetResponse;
        return result200;
        });
    } else if (status === 201) {
        return response.text().then((_responseText) => {
        let result201: any = null;
        result201 = _responseText === "" ? null : JSON.parse(_responseText) as Models.TrueFalseResponse;
        return throwException("Created", status, _responseText, _headers, result201);
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        result400 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 500) {
        return response.text().then((_responseText) => {
        let result500: any = null;
        result500 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<any>(null as any);
  
    }

    
    
    
        
    
    
    /**
         * @param body (optional) 
         * @return OK
         */
    
        export async function PluginConfiguration_configurationSetPut(body:Models.ConfigurationSetUpdateRequest | undefined): Promise<any> {

        let url_ = baseUrl + "ConfigurationSet";

        url_ = url_.replace(/[?&]$/, "");

     const content_ = JSON.stringify(body);

         let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: await getHeaders("PUT", String(baseUrl)),
            next: { revalidate: 0 },
        };

        return fetch(url_, options_).then((_response: Response) => {
   
            return PluginConfiguration_processConfigurationSetPut(_response);
        });
    }
   
   function PluginConfiguration_processConfigurationSetPut(response: Response): Promise<any> {
       const status = response.status;
       let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        result200 = _responseText === "" ? null : JSON.parse(_responseText) as Models.TrueFalseResponse;
        return result200;
        });
    } else if (status === 201) {
        return response.text().then((_responseText) => {
        let result201: any = null;
        result201 = _responseText === "" ? null : JSON.parse(_responseText) as Models.TrueFalseResponse;
        return result201;
        });
    } else if (status === 204) {
        return response.text().then((_responseText) => {
        let result204: any = null;
        result204 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("No Content", status, _responseText, _headers, result204);
        });
    } else if (status === 500) {
        return response.text().then((_responseText) => {
        let result500: any = null;
        result500 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<any>(null as any);
  
    }

    
    
    
        
    
    
    /**
         * Deletes the configuration set based on plugin type and configuration set code.
         * @param pluginType plugin type
         * @param configurationSetCode Configuration set code
         * @return OK
         */
            
export async function PluginConfiguration_configurationSetDelete(pluginType:string, configurationSetCode:string ): Promise<any> {
 

        let url_ = baseUrl + "ConfigurationSet/{pluginType}/{configurationSetCode}";

        if (pluginType === undefined || pluginType === null)
            throw new Error("The parameter 'pluginType' must be defined.");
        url_ = url_.replace("{pluginType}", encodeURIComponent("" + pluginType));
        if (configurationSetCode === undefined || configurationSetCode === null)
            throw new Error("The parameter 'configurationSetCode' must be defined.");
        url_ = url_.replace("{configurationSetCode}", encodeURIComponent("" + configurationSetCode));
        url_ = url_.replace(/[?&]$/, "");

         let options_: RequestInit = {
            method: "DELETE",
            cache: "no-store",
            headers: await getHeaders("DELETE", String(baseUrl)),
        };

        return fetch(url_, options_).then((_response: Response) => {
           
           return PluginConfiguration_processConfigurationSetDelete(_response);
     
        });
    }
   
   
  function PluginConfiguration_processConfigurationSetDelete(response: Response): Promise<any> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        result200 = _responseText === "" ? null : JSON.parse(_responseText) as Models.TrueFalseResponse;
        return result200;
        });
    } else if (status === 204) {
        return response.text().then((_responseText) => {
        let result204: any = null;
        result204 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("No Content", status, _responseText, _headers, result204);
        });
    } else if (status === 500) {
        return response.text().then((_responseText) => {
        let result500: any = null;
        result500 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<any>(null as any);
      
      
    }

    
    
    
        
    
    
    /**
         * Retrieves the plugin configuration set details by plugin type and configuration set code, used in PaymentManager and admin.
         * @param pluginType Plugin type
         * @param configurationSetCode The code representing the configuration set.
         * @return OK
         */
            
export async function PluginConfiguration_configurationSetGet(pluginType:string, configurationSetCode:string ): Promise<any> {
 

        let options_: RequestInit = {
          method: "GET",
          cache: "no-store",
          headers: await getHeaders("GET", String(baseUrl)),
          next: { revalidate: 0 },
        };

        let url_ = baseUrl + "ConfigurationSet/{pluginType}/{configurationSetCode}";

        if (pluginType === undefined || pluginType === null)
            throw new Error("The parameter 'pluginType' must be defined.");
        url_ = url_.replace("{pluginType}", encodeURIComponent("" + pluginType));
        if (configurationSetCode === undefined || configurationSetCode === null)
            throw new Error("The parameter 'configurationSetCode' must be defined.");
        url_ = url_.replace("{configurationSetCode}", encodeURIComponent("" + configurationSetCode));
        url_ = url_.replace(/[?&]$/, "");

 
        return fetch(url_, options_).then((_response: Response) => {
           
           return PluginConfiguration_processConfigurationSetGet(_response);
     
        });
    }
   
   
  function PluginConfiguration_processConfigurationSetGet(response: Response): Promise<any> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        result200 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ConfigurationSetResponse;
        return result200;
        });
    } else if (status === 204) {
        return response.text().then((_responseText) => {
        let result204: any = null;
        result204 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("No Content", status, _responseText, _headers, result204);
        });
    } else if (status === 500) {
        return response.text().then((_responseText) => {
        let result500: any = null;
        result500 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<any>(null as any);
      
      
    }

    
    
    
        
    
    
    /**
         * Retrives the list of configuration sets that are available against the specified plugin Id.
         * @param pluginId The ID of the plugin.
         * @param expand (optional) Expand options for querying the database.
         * @param filter (optional) Collection of filters to apply when retrieving the payment configuration list.
         * @param sort (optional) Sorting criteria to determine the order of records.
         * @param pageIndex (optional) Page index for pagination.
         * @param pageSize (optional) Number of items per page in paginated results.
         * @return OK
         */
            
export async function PluginConfiguration_configurationSets(pluginId:number, expand:string[] | undefined, filter:FilterTuple[] | undefined, sort:{ [key: string]: string; } | undefined, pageIndex:number | undefined, pageSize:number | undefined ): Promise<any> {
 

        let options_: RequestInit = {
          method: "GET",
          cache: "no-store",
          headers: await getHeaders("GET", String(baseUrl)),
        };

        let url_ = baseUrl + "ConfigurationSets/{pluginId}";
    
            
            
        
            
            
        
            
            
        
            
            
        
            
            
        
    
    
                            url_ += buildEndpointQueryString({ expand,  filter,  sort,  pageIndex,  pageSize});
            
            
            
            
            
            
    

        if (pluginId === undefined || pluginId === null)
            throw new Error("The parameter 'pluginId' must be defined.");
        url_ = url_.replace("{pluginId}", encodeURIComponent("" + pluginId));
        if (expand === null)
            throw new Error("The parameter 'expand' cannot be null.");
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        url_ = url_.replace(/[?&]$/, "");

 
        return fetch(url_, options_).then((_response: Response) => {
           
           return PluginConfiguration_processConfigurationSets(_response);
     
        });
    }
   
   
  function PluginConfiguration_processConfigurationSets(response: Response): Promise<any> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        result200 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ConfigurationListResponseModel;
        return result200;
        });
    } else if (status === 204) {
        return response.text().then((_responseText) => {
        let result204: any = null;
        result204 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("No Content", status, _responseText, _headers, result204);
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        result400 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 500) {
        return response.text().then((_responseText) => {
        let result500: any = null;
        result500 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<any>(null as any);
      
      
    }

    
    
    
        
    
    
    /**
         * Retrives the list of sub types based on payment types.
         * @param pluginType Plugin types
         * @param expand (optional) Expand options for querying the database.
         * @param filter (optional) Collection of filters to apply when retrieving the payment configuration list.
         * @param sort (optional) Sorting criteria to determine the order of records.
         * @param pageIndex (optional) Page index for pagination.
         * @param pageSize (optional) Number of items per page in paginated results.
         * @return OK
         */
            
export async function PluginConfiguration_subTypes(pluginType:string, expand:string[] | undefined, filter:FilterTuple[] | undefined, sort:{ [key: string]: string; } | undefined, pageIndex:number | undefined, pageSize:number | undefined ): Promise<any> {
 

        let options_: RequestInit = {
          method: "GET",
          cache: "no-store",
          headers: await getHeaders("GET", String(baseUrl)),
        };

        let url_ = baseUrl + "SubTypes/{pluginType}";
    
            
            
        
            
            
        
            
            
        
            
            
        
            
            
        
    
    
                            url_ += buildEndpointQueryString({ expand,  filter,  sort,  pageIndex,  pageSize});
            
            
            
            
            
            
    

        if (pluginType === undefined || pluginType === null)
            throw new Error("The parameter 'pluginType' must be defined.");
        url_ = url_.replace("{pluginType}", encodeURIComponent("" + pluginType));
        if (expand === null)
            throw new Error("The parameter 'expand' cannot be null.");
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        if (sort === null)
            throw new Error("The parameter 'sort' cannot be null.");
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        url_ = url_.replace(/[?&]$/, "");

 
        return fetch(url_, options_).then((_response: Response) => {
           
           return PluginConfiguration_processSubTypes(_response);
     
        });
    }
   
   
  function PluginConfiguration_processSubTypes(response: Response): Promise<any> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        result200 = _responseText === "" ? null : JSON.parse(_responseText) as Models.PluginSubTypesResponse;
        return result200;
        });
    } else if (status === 204) {
        return response.text().then((_responseText) => {
        let result204: any = null;
        result204 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("No Content", status, _responseText, _headers, result204);
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        result400 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 500) {
        return response.text().then((_responseText) => {
        let result500: any = null;
        result500 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
        return throwException("Internal Server Error", status, _responseText, _headers, result500);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<any>(null as any);
      
      
    }

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
try{
    if (result !== null && result !== undefined)
        throw result;
   
    else
        throw new Error(message);
   }
   catch(ex)
   {
    const parsedRes = response === "" ? null : JSON.parse(response) as any;
    return parsedRes;
   }
}