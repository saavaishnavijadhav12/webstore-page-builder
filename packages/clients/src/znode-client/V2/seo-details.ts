//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as Models from "./multifront-types";
import { addCacheOption, buildEndpointQueryString, getHeaders } from "./base";
import * as MultifrontTypes from "./multifront-types";
import { FilterTuple } from "./multifront-types";

const baseUrl = process.env.API_URL;

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

/**
 * Retrieves SEO details based on the provided parameters.
 * @param localeCode (optional) The identifier for the locale.
 * @param storeCode The identifier for the portal.
 * @param seoType (optional) The type of the SEO entity.
 * @param seoId (optional) The identifier for the SEO entity.
 * @param seoURL (optional) The URL for the SEO entity.
 * @param catalogCode (optional) The unique code of the catalog to retrieve category details.
 * @return Success(Indicates that the request is successfully executed and the response body return the data in CategoryListResponse model.)
 */

export async function SEOs_seoDetail(
  localeCode: string | undefined,
  storeCode: string,
  seoType: string | undefined,
  seoId: number | undefined,
  seoURL: string | undefined,
  catalogCode: string | undefined,
  cacheInvalidator?: FilterTuple[] | undefined
): Promise<MultifrontTypes.SEODetailResponse> {
  let options_: RequestInit = {
    method: "GET",
    headers: await getHeaders("GET", String(baseUrl)),
    next: { revalidate: 0 },
  };
  options_ = addCacheOption(cacheInvalidator ?? [], options_);

  let url_ = baseUrl + "v2/seo/seo-detail";

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "localeCode=" +
    encodeURIComponent("" + localeCode);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "storeCode=" +
    encodeURIComponent("" + storeCode);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "seoType=" +
    encodeURIComponent("" + seoType);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "seoId=" +
    encodeURIComponent("" + seoId);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "seoURL=" +
    encodeURIComponent("" + seoURL);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "catalogCode=" +
    encodeURIComponent("" + catalogCode);

  if (localeCode === null)
    throw new Error("The parameter 'localeCode' cannot be null.");
  if (storeCode === undefined || storeCode === null)
    throw new Error(
      "The parameter 'storeCode' must be defined and cannot be null."
    );
  else if (seoType === null)
    throw new Error("The parameter 'seoType' cannot be null.");
  if (seoId === null) throw new Error("The parameter 'seoId' cannot be null.");
  if (seoURL === null)
    throw new Error("The parameter 'seoURL' cannot be null.");
  if (catalogCode === null)
    throw new Error("The parameter 'catalogCode' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return SEOs_processSeoDetail(_response);
  });
}

function SEOs_processSeoDetail(
  response: Response
): Promise<MultifrontTypes.SEODetailResponse> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then(_responseText => {
      let result200: any = null;
      result200 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.SEODetailResponse);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then(_responseText => {
      let result204: any = null;
      result204 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "No Content(Indicates that the request is successfully executed, but the response body does not contain any data.)",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then(_responseText => {
      let result400: any = null;
      result400 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Bad Request(The request contain invalid Data.)",
        status,
        _responseText,
        _headers,
        result400
      );
    });
  } else if (status === 500) {
    return response.text().then(_responseText => {
      let result500: any = null;
      result500 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Server Error(Indicates that an error occurred on the server.)",
        status,
        _responseText,
        _headers,
        result500
      );
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then(_responseText => {
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    });
  }
  return Promise.resolve<any>(null as any);
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
  try {
    if (result !== null && result !== undefined) throw result;
    else throw new Error(message);
  } catch (ex) {
    const parsedRes = response === "" ? null : (JSON.parse(response) as any);
    return parsedRes;
  }
}
