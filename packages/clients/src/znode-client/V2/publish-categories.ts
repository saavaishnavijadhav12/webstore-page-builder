//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as Models from "./multifront-types";
import * as MultifrontTypes from "./multifront-types";

import { addCacheOption, buildEndpointQueryString, getHeaders } from "./base";

import { FilterTuple } from "./multifront-types";

const baseUrl = process.env.API_URL;

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

/**
 * Gets list of categories.
 * @param filter (optional)
 * @param sort (optional)
 * @param pageIndex (optional)
 * @param pageSize (optional)
 * @return Success - The request was successfully executed, and the response body contains the data.
 */

export async function Categories_categories(
  filter: FilterTuple[] | undefined,
  sort: { [key: string]: string } | undefined,
  pageIndex: number | undefined,
  pageSize: number | undefined,
  cacheInvalidator?: FilterTuple[] | undefined
): Promise<MultifrontTypes.CategoryListModelResponse> {
  let options_: RequestInit = {
    method: "GET",

    headers: await getHeaders("GET", String(baseUrl)),
  };

  let url_ = baseUrl + "v2/categories";

  url_ += buildEndpointQueryString({ filter, sort, pageIndex, pageSize });

  if (filter === null) throw new Error("The parameter 'filter' cannot be null.");
  if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
  if (pageIndex === null) throw new Error("The parameter 'pageIndex' cannot be null.");
  if (pageSize === null) throw new Error("The parameter 'pageSize' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return Categories_processCategories(_response);
  });
}

function Categories_processCategories(response: Response): Promise<MultifrontTypes.CategoryListModelResponse> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then((_responseText) => {
      let result200: any = null;
      result200 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.CategoryListModelResponse);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then((_responseText) => {
      let result204: any = null;
      result204 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("No Content - The request was successfully executed, but the response body contains no data.", status, _responseText, _headers, result204);
    });
  } else if (status === 400) {
    return response.text().then((_responseText) => {
      let result400: any = null;
      result400 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Bad Request - The request contains invalid data.", status, _responseText, _headers, result400);
    });
  } else if (status === 500) {
    return response.text().then((_responseText) => {
      let result500: any = null;
      result500 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Server Error - An error occurred on the server.", status, _responseText, _headers, result500);
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then((_responseText) => {
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    });
  }
  return Promise.resolve<any>(null as any);
}

/**
 * List all publish categories.
 * @param expand (optional) Expands to be retrieved along with category list.It will contain the "seo" in params to get the seo details
 * @param filter (optional) A collection of filters to apply when retrieving the publish category list.
 * @param sort (optional) Sorting determines whether the records are to be sorted in ascending or descending order. It will contain ZnodeCatalogId, LocaleId, PublishCategoryId, CategoryCode, CategoryName, CatalogName.
 * @param pageIndex (optional) When the record count is high, utilizing pagination enables the retrieval of a specific range of records.
 * @param pageSize (optional) The number of items to be displayed per page in paginated within paginated results.
 * @return Success(Indicates that the request is successfully executed and the response body return the data in publish products list response model.)
 */

export async function PublishCategories_publishedCategories(
  expand: string[] | undefined,
  filter: FilterTuple[] | undefined,
  sort: { [key: string]: string } | undefined,
  pageIndex: number | undefined,
  pageSize: number | undefined,
  cacheInvalidator?: FilterTuple[] | undefined
): Promise<MultifrontTypes.PublishCategoryListsResponse> {
  let options_: RequestInit = {
    method: "GET",

    headers: await getHeaders("GET", String(baseUrl)),
  };
  options_ = addCacheOption(cacheInvalidator ?? [], options_);
  let url_ = baseUrl + "v2/published-categories";

  url_ += buildEndpointQueryString({ expand, filter, sort, pageIndex, pageSize });

  if (expand === null) throw new Error("The parameter 'expand' cannot be null.");
  if (filter === null) throw new Error("The parameter 'filter' cannot be null.");
  if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
  if (pageIndex === null) throw new Error("The parameter 'pageIndex' cannot be null.");
  if (pageSize === null) throw new Error("The parameter 'pageSize' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return PublishCategories_processPublishedCategories(_response);
  });
}

function PublishCategories_processPublishedCategories(response: Response): Promise<MultifrontTypes.PublishCategoryListsResponse> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then((_responseText) => {
      let result200: any = null;
      result200 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.PublishCategoryListsResponse);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then((_responseText) => {
      let result204: any = null;
      result204 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "No Content(Indicates that the request is successfully executed, but the response body does not contain any data.)",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then((_responseText) => {
      let result400: any = null;
      result400 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Bad Request(The request contain invalid Data.)", status, _responseText, _headers, result400);
    });
  } else if (status === 500) {
    return response.text().then((_responseText) => {
      let result500: any = null;
      result500 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Server Error(Indicates that an error occurred on the server.)", status, _responseText, _headers, result500);
    });
  } else if (status === 404) {
    return response.text().then((_responseText) => {
      let result404: any = null;
      result404 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Not Found", status, _responseText, _headers, result404);
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then((_responseText) => {
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    });
  }
  return Promise.resolve<any>(null as any);
}

/**
 * Get published category details based on the provided category, catalog, store, and locale codes.
 * @param categoryCode Category code used to fetch the specific published category. Required.
 * @param catalogCode Catalog code to fetch categories associated with a specific catalog. Required.
 * @param storeCode Store code to fetch categories available for a specific store. Required.
 * @param localeCode (optional) Locale code for localization of category details. Optional.
 * @param expand (optional) Collection of entities to expand in the response (e.g., attributes, images). Optional.
 * @param filter (optional) Filters to apply for narrowing down the results (e.g., by date, status). Optional.
 * @param sort (optional) Sort criteria for ordering the response (e.g., ascending or descending). Optional.
 * @return Success - The request is successfully executed, returning category details.
 */

export async function PublishCategories_publishedCategoriesByCategoryCode(
  categoryCode: string,
  catalogCode: string,
  storeCode: string,
  localeCode: string | undefined,
  expand: string[] | undefined,
  filter: FilterTuple[] | undefined,
  sort: { [key: string]: string } | undefined
): Promise<MultifrontTypes.PublishedCategoryResponse> {
  let options_: RequestInit = {
    method: "GET",
    cache: "no-store",
    headers: await getHeaders("GET", String(baseUrl)),
  };

  let url_ = baseUrl + "v2/published-categories/{categoryCode}";

  url_ += buildEndpointQueryString({ expand, filter, sort });

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "catalogCode=" + encodeURIComponent("" + catalogCode);

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "storeCode=" + encodeURIComponent("" + storeCode);

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "localeCode=" + encodeURIComponent("" + localeCode);

  if (categoryCode === undefined || categoryCode === null) throw new Error("The parameter 'categoryCode' must be defined.");
  url_ = url_.replace("{categoryCode}", encodeURIComponent("" + categoryCode));
  if (catalogCode === undefined || catalogCode === null) throw new Error("The parameter 'catalogCode' must be defined and cannot be null.");
  else if (storeCode === undefined || storeCode === null) throw new Error("The parameter 'storeCode' must be defined and cannot be null.");
  else if (localeCode === null) throw new Error("The parameter 'localeCode' cannot be null.");
  if (expand === null) throw new Error("The parameter 'expand' cannot be null.");
  if (filter === null) throw new Error("The parameter 'filter' cannot be null.");
  if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return PublishCategories_processPublishedCategoriesByCategoryCode(_response);
  });
}

function PublishCategories_processPublishedCategoriesByCategoryCode(response: Response): Promise<MultifrontTypes.PublishedCategoryResponse> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then((_responseText) => {
      let result200: any = null;
      result200 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.PublishedCategoryResponse);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then((_responseText) => {
      let result204: any = null;
      result204 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("No Content - The request is successfully executed, but no data is found.", status, _responseText, _headers, result204);
    });
  } else if (status === 400) {
    return response.text().then((_responseText) => {
      let result400: any = null;
      result400 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Bad Request - The request contains invalid data or missing required parameters.", status, _responseText, _headers, result400);
    });
  } else if (status === 404) {
    return response.text().then((_responseText) => {
      let result404: any = null;
      result404 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Not Found - The server cannot find the requested resource.", status, _responseText, _headers, result404);
    });
  } else if (status === 500) {
    return response.text().then((_responseText) => {
      let result500: any = null;
      result500 = _responseText === "" ? null : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException("Server Error - An internal error occurred on the server.", status, _responseText, _headers, result500);
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then((_responseText) => {
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    });
  }
  return Promise.resolve<any>(null as any);
}

/**
 * Get published category details. and this api will be deprecated soon.
 * @param categoryId Category Id used to fetch the specific published category. Required.
 * @param catalogCode Catalog code to fetch categories associated with a specific catalog. Required.
 * @param storeCode Store code to fetch categories available for a specific store. Required.
 * @param localeCode (optional) Locale code for localization of category details. Optional.
 * @param expand (optional) Collection of entities to expand in the response (e.g., attributes, images). Optional.
 * @param filter (optional) Filters to apply for narrowing down the results (e.g., by date, status). Optional.
 * @param sort (optional) Sort criteria for ordering the response (e.g., ascending or descending). Optional.
 * @return Success - The request is successfully executed, returning category details.
 */

export async function PublishCategories_idByCategoryId(
  categoryId: number,
  catalogCode: string,
  storeCode: string,
  localeCode: string | undefined,
  expand: string[] | undefined,
  filter: FilterTuple[] | undefined,
  sort: { [key: string]: string } | undefined,
  cacheInvalidator?: FilterTuple[] | undefined
): Promise<MultifrontTypes.PublishedCategoryResponse> {
  let options_: RequestInit = {
    method: "GET",
    cache: "no-store",
    headers: await getHeaders("GET", String(baseUrl)),
  };
  options_ = addCacheOption(cacheInvalidator ?? [], options_);

  let url_ = baseUrl + "v2/published-categories/id/{categoryId}";

  url_ += buildEndpointQueryString({ expand, filter, sort });

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "catalogCode=" +
    encodeURIComponent("" + catalogCode);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "storeCode=" +
    encodeURIComponent("" + storeCode);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "localeCode=" +
    encodeURIComponent("" + localeCode);

  if (categoryId === undefined || categoryId === null)
    throw new Error("The parameter 'categoryId' must be defined.");
  url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
  if (catalogCode === undefined || catalogCode === null)
    throw new Error(
      "The parameter 'catalogCode' must be defined and cannot be null."
    );
  else if (storeCode === undefined || storeCode === null)
    throw new Error(
      "The parameter 'storeCode' must be defined and cannot be null."
    );
  else if (localeCode === null)
    throw new Error("The parameter 'localeCode' cannot be null.");
  if (expand === null)
    throw new Error("The parameter 'expand' cannot be null.");
  if (filter === null)
    throw new Error("The parameter 'filter' cannot be null.");
  if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return PublishCategories_processIdByCategoryId(_response);
  });
}

function PublishCategories_processIdByCategoryId(
  response: Response
): Promise<MultifrontTypes.PublishedCategoryResponse> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then(_responseText => {
      let result200: any = null;
      result200 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.PublishedCategoryResponse);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then(_responseText => {
      let result204: any = null;
      result204 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "No Content - The request is successfully executed, but no data is found.",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then(_responseText => {
      let result400: any = null;
      result400 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Bad Request - The request contains invalid data or missing required parameters.",
        status,
        _responseText,
        _headers,
        result400
      );
    });
  } else if (status === 404) {
    return response.text().then(_responseText => {
      let result404: any = null;
      result404 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Not Found - The server cannot find the requested resource.",
        status,
        _responseText,
        _headers,
        result404
      );
    });
  } else if (status === 500) {
    return response.text().then(_responseText => {
      let result500: any = null;
      result500 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Server Error - An internal error occurred on the server.",
        status,
        _responseText,
        _headers,
        result500
      );
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then(_responseText => {
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    });
  }
  return Promise.resolve<any>(null as any);
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
  try {
    if (result !== null && result !== undefined) throw result;
    else throw new Error(message);
  } catch (ex) {
    const parsedRes = response === "" ? null : (JSON.parse(response) as any);
    return parsedRes;
  }
}
