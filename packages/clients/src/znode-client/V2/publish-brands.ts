//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import * as Models from "./multifront-types";

import { addCacheOption, buildEndpointQueryString, getHeaders } from "./base";
import * as MultifrontTypes from "./multifront-types";

import { FilterTuple } from "./multifront-types";

const baseUrl = process.env.API_URL;

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

/**
 * @param filter (optional)
 * @param sort (optional)
 * @return OK
 */

export async function PublishBrands_publishedBrandsGet(
  filter: FilterTuple[] | undefined,
  sort: { [key: string]: string } | undefined,
  cacheInvalidator?: FilterTuple[] | undefined
): Promise<MultifrontTypes.BrandListModelResponse> {
  let options_: RequestInit = {
    method: "GET",
    headers: await getHeaders("GET", String(baseUrl)),
    next: { revalidate: 0 },
  };
  options_ = addCacheOption(cacheInvalidator ?? [], options_);

  let url_ = baseUrl + "v2/published-brands";

  url_ += buildEndpointQueryString({ filter, sort });

  if (filter === null)
    throw new Error("The parameter 'filter' cannot be null.");
  if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return PublishBrands_processPublishedBrandsGet(_response);
  });
}

function PublishBrands_processPublishedBrandsGet(
  response: Response
): Promise<MultifrontTypes.BrandListModelResponse> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then(_responseText => {
      let result200: any = null;
      result200 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.BrandListModelResponse);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then(_responseText => {
      let result204: any = null;
      result204 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "No Content(Indicates that the request is successfully executed, but the response body does not contain any data.)",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then(_responseText => {
      let result400: any = null;
      result400 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Bad Request(The request contain invalid Data.)",
        status,
        _responseText,
        _headers,
        result400
      );
    });
  } else if (status === 500) {
    return response.text().then(_responseText => {
      let result500: any = null;
      result500 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Server Error(Indicates that an error occurred on the server.)",
        status,
        _responseText,
        _headers,
        result500
      );
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then(_responseText => {
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    });
  }
  return Promise.resolve<any>(null as any);
}

/**
 * Gets a brand by brandId.
 * @param brandCode BrandCode of brand to be retrieved.
 * @param localeCode (optional) The code to get the localeId. localeCode is required field.
 * @param storeCode (optional) The code to get the portalId. storeCode is required field.
 * @return Success(Indicates that the request is successfully executed and the response body return the data in publish brands list response model.)
 */

export async function PublishBrands_publishedBrandsGetByBrandCode(
  brandCode: string,
  storeCode: string,
  localeCode: string | undefined,
  cacheInvalidator?: FilterTuple[] | undefined
): Promise<MultifrontTypes.BrandsResponse> {
  let options_: RequestInit = {
    method: "GET",
    cache: "no-store",
    headers: await getHeaders("GET", String(baseUrl)),
    next: { revalidate: 0 },
  };
  options_ = addCacheOption(cacheInvalidator ?? [], options_);

  let url_ = baseUrl + "v2/published-brands/{brandCode}";

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "storeCode=" +
    encodeURIComponent("" + storeCode);

  url_ +=
    (url_.indexOf("?") === -1 ? "?" : "&") +
    "localeCode=" +
    encodeURIComponent("" + localeCode);

  if (brandCode === undefined || brandCode === null)
    throw new Error("The parameter 'brandCode' must be defined.");
  url_ = url_.replace("{brandCode}", encodeURIComponent("" + brandCode));
  if (storeCode === undefined || storeCode === null)
    throw new Error(
      "The parameter 'storeCode' must be defined and cannot be null."
    );
  else if (localeCode === null)
    throw new Error("The parameter 'localeCode' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return PublishBrands_processPublishedBrandsGetByBrandCode(_response);
  });
}

function PublishBrands_processPublishedBrandsGetByBrandCode(
  response: Response
): Promise<MultifrontTypes.BrandsResponse> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then(_responseText => {
      let result200: any = null;
      result200 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.BrandsResponse);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then(_responseText => {
      let result204: any = null;
      result204 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "No Content(Indicates that the request is successfully executed, but the response body does not contain any data.)",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then(_responseText => {
      let result400: any = null;
      result400 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Bad Request(The request contain invalid Data.)",
        status,
        _responseText,
        _headers,
        result400
      );
    });
  } else if (status === 500) {
    return response.text().then(_responseText => {
      let result500: any = null;
      result500 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "Server Error(Indicates that an error occurred on the server.)",
        status,
        _responseText,
        _headers,
        result500
      );
    });
  } else if (status === 404) {
    return response.text().then(_responseText => {
      let result404: any = null;
      result404 =
        _responseText === ""
          ? null
          : (JSON.parse(_responseText) as Models.ZnodeErrorDetail);
      return throwException(
        "This status code indicates that the server cannot find the requested resource.)",
        status,
        _responseText,
        _headers,
        result404
      );
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then(_responseText => {
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    });
  }
  return Promise.resolve<any>(null as any);
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
  try {
    if (result !== null && result !== undefined) throw result;
    else throw new Error(message);
  } catch (ex) {
    const parsedRes = response === "" ? null : (JSON.parse(response) as any);
    return parsedRes;
  }
}

export async function PublishBrands_productsByBrandCode(
  brandCode: string,
  catalogCode: string,
  localeCode: string | undefined,
  storeCode: string | undefined,
  additionalAttribute: string | undefined,
  refineBy: string | undefined,
  categoryCode: string | undefined,
  expand: string[] | undefined,
  filter: FilterTuple[] | undefined,
  sort: { [key: string]: string } | undefined,
  pageIndex: number | undefined,
  pageSize: number | undefined
): Promise<MultifrontTypes.CategoryContentResponse> {
  let options_: RequestInit = {
    method: "GET",
    headers: await getHeaders("GET", String(baseUrl)),
    next: { revalidate: 0 },
  };

  let url_ = baseUrl + "v2/published-brands/{brandCode}/products";

  url_ += buildEndpointQueryString({ expand, filter, sort, pageIndex, pageSize });

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "catalogCode=" + encodeURIComponent("" + catalogCode);

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "localeCode=" + encodeURIComponent("" + localeCode);

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "StoreCode=" + encodeURIComponent("" + storeCode);

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "AdditionalAttribute=" + encodeURIComponent("" + additionalAttribute);

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "RefineBy=" + encodeURIComponent("" + refineBy);

  url_ += (url_.indexOf("?") === -1 ? "?" : "&") + "categoryCode=" + encodeURIComponent("" + categoryCode);

  if (brandCode === undefined || brandCode === null) throw new Error("The parameter 'brandCode' must be defined.");
  url_ = url_.replace("{brandCode}", encodeURIComponent("" + brandCode));
  if (catalogCode === undefined || catalogCode === null) throw new Error("The parameter 'catalogCode' must be defined and cannot be null.");
  else if (localeCode === null) throw new Error("The parameter 'localeCode' cannot be null.");
  if (storeCode === null) throw new Error("The parameter 'storeCode' cannot be null.");
  if (additionalAttribute === null) throw new Error("The parameter 'additionalAttribute' cannot be null.");
  if (refineBy === null) throw new Error("The parameter 'refineBy' cannot be null.");
  if (categoryCode === null) throw new Error("The parameter 'categoryCode' cannot be null.");
  if (expand === null) throw new Error("The parameter 'expand' cannot be null.");
  if (filter === null) throw new Error("The parameter 'filter' cannot be null.");
  if (sort === null) throw new Error("The parameter 'sort' cannot be null.");
  if (pageIndex === null) throw new Error("The parameter 'pageIndex' cannot be null.");
  if (pageSize === null) throw new Error("The parameter 'pageSize' cannot be null.");
  url_ = url_.replace(/[?&]$/, "");
  return fetch(url_, options_).then((_response: Response) => {
    return PublishBrands_processProductsByBrandCode(_response);
  });
}

function PublishBrands_processProductsByBrandCode(response: Response): Promise<MultifrontTypes.CategoryContentResponse> {
  const status = response.status;
   let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
if (status === 200) {
    return response.text().then((_responseText) => {
    let result200: any = null;
    result200 = _responseText === "" ? null : JSON.parse(_responseText) as Models.CategoryContentResponse;
    return result200;
    });
} else if (status === 204) {
    return response.text().then((_responseText) => {
    let result204: any = null;
    result204 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
    return throwException("No Content(Indicates that the request is successfully executed, but the response body does not contain any data.)", status, _responseText, _headers, result204);
    });
} else if (status === 400) {
    return response.text().then((_responseText) => {
    let result400: any = null;
    result400 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
    return throwException("Bad Request(The request contain invalid Data.)", status, _responseText, _headers, result400);
    });
} else if (status === 500) {
    return response.text().then((_responseText) => {
    let result500: any = null;
    result500 = _responseText === "" ? null : JSON.parse(_responseText) as Models.ZnodeErrorDetail;
    return throwException("Server Error(Indicates that an error occurred on the server.)", status, _responseText, _headers, result500);
    });
} else if (status !== 200 && status !== 204) {
    return response.text().then((_responseText) => {
    return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    });
}
return Promise.resolve<any>(null as any);
   
  
}
