//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
import * as MultifrontTypes from "../../types/interface";

import { getHeaders } from "./BaseClient";

const baseUrl = process.env.API_URL;

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

/**
 * Payment details for a specific order by orderId.
 * @param orderId The unique identifier for the order.
 * @return OK(Indicates that the request is successfully executed, and the response body contains the requested data.)
 * @deprecated
 */

export async function Payments_paymentsByOrderId(orderId: string): Promise<MultifrontTypes.UpdateOrderPaymentResponseModel> {
  let options_: RequestInit = {
    method: "GET",
    cache: "no-store",
    headers: await getHeaders("GET", String(baseUrl)),
    next: { revalidate: 0 },
  };

  let url_ = baseUrl + "payments/{orderId}";

  if (orderId === undefined || orderId === null) throw new Error("The parameter 'orderId' must be defined.");
  url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
  url_ = url_.replace(/[?&]$/, "");

  return fetch(url_, options_).then((_response: Response) => {
    return Payments_processPaymentsByOrderId(_response);
  });
}

function Payments_processPaymentsByOrderId(response: Response): Promise<MultifrontTypes.UpdateOrderPaymentResponseModel> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then((_responseText) => {
      let result200: any = null;
      result200 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.UpdateOrderPaymentResponseModel);
      return result200;
    });
  } else if (status === 204) {
    return response.text().then((_responseText) => {
      let result204: any = null;
      result204 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException(
        "No Content(Indicates that the request is successfully executed, but the response body does not contain any data.)",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then((_responseText) => {
      let result400: any = null;
      result400 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException("Bad Request(Indicates that the server could not understand the request due to invalid syntax.)", status, _responseText, _headers, result400);
    });
  } else if (status === 401) {
    return response.text().then((_responseText) => {
      let result401: any = null;
      result401 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException("Unauthorized(Indicates that the user is not authorized to perform the requested operation.)", status, _responseText, _headers, result401);
    });
  } else if (status === 500) {
    return response.text().then((_responseText) => {
      let result500: any = null;
      result500 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException(
        "Internal Server Error(Indicates that an error occurred on the server while retrieving the payment details.)",
        status,
        _responseText,
        _headers,
        result500
      );
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then((_responseText) => {
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    });
  }
  return Promise.resolve<any>(null as any);
}

/**
 * Validate a discount item for an order payment.
 * @param body (optional) The model containing information to validate the discount item.
 * @return OK
 * @deprecated
 */

export async function Payments_validateDiscount(
  body: MultifrontTypes.OrderPaymentDetailsDiscountRequestModel | undefined
): Promise<MultifrontTypes.UpdateOrderPaymentResponseModel> {
  let url_ = baseUrl + "payments/ValidateDiscount";

  url_ = url_.replace(/[?&]$/, "");

  const content_ = JSON.stringify(body);

  let options_: RequestInit = {
    body: content_,
    method: "POST",
    cache: "no-store",
    headers: await getHeaders("POST", String(baseUrl)),
  };

  return fetch(url_, options_).then((_response: Response) => {
    return Payments_processValidateDiscount(_response);
  });
}

function Payments_processValidateDiscount(response: Response): Promise<MultifrontTypes.UpdateOrderPaymentResponseModel> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then((_responseText) => {
      let result200: any = null;
      result200 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.UpdateOrderPaymentResponseModel);
      return result200;
    });
  } else if (status === 201) {
    return response.text().then((_responseText) => {
      let result201: any = null;
      result201 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.UpdateOrderPaymentResponseModel);
      return result201;
    });
  } else if (status === 204) {
    return response.text().then((_responseText) => {
      let result204: any = null;
      result204 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException(
        "No Content (Indicates that the request is successfully executed, but the response body does not contain any data.)",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then((_responseText) => {
      let result400: any = null;
      result400 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException("Bad Request(Indicates that the server could not understand the request due to invalid syntax.)", status, _responseText, _headers, result400);
    });
  } else if (status === 500) {
    return response.text().then((_responseText) => {
      let result500: any = null;
      result500 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException(
        "Internal Server Error(Indicates that an error occurred on the server while validating the discount item.)",
        status,
        _responseText,
        _headers,
        result500
      );
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then((_responseText) => {
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    });
  }
  return Promise.resolve<any>(null as any);
}

/**
 * Create an Order Payment.
 * @param body (optional) The order payment model to create.
 * @return OK
 */

export async function Payments_payments(body: MultifrontTypes.UpdateOrderPaymentRequestModel | undefined): Promise<MultifrontTypes.UpdateBillingDetailsResponseModel> {
  let url_ = baseUrl + "commerceapi/v1/payments";
  url_ = url_.replace(/[?&]$/, "");

  const content_ = JSON.stringify(body);

  let options_: RequestInit = {
    body: content_,
    method: "PUT",
    headers: await getHeaders("PUT", String(baseUrl)),
    next: { revalidate: 0 },
  };

  return fetch(url_, options_).then((_response: Response) => {
    return Payments_processPayments(_response);
  });
}

function Payments_processPayments(response: Response): Promise<MultifrontTypes.UpdateBillingDetailsResponseModel> {
  const status = response.status;
  let _headers: any = {};
  if (response.headers && response.headers.forEach) {
    response.headers.forEach((v: any, k: any) => (_headers[k] = v));
  }
  if (status === 200) {
    return response.text().then((_responseText) => {
      let result200: any = null;
      result200 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.UpdateBillingDetailsResponseModel);
      return result200;
    });
  } else if (status === 201) {
    return response.text().then((_responseText) => {
      let result201: any = null;
      result201 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.UpdateBillingDetailsResponseModel);
      return result201;
    });
  } else if (status === 204) {
    return response.text().then((_responseText) => {
      let result204: any = null;
      result204 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException(
        "No Content(Indicates that the request is successfully executed, but the response body does not contain any data.)",
        status,
        _responseText,
        _headers,
        result204
      );
    });
  } else if (status === 400) {
    return response.text().then((_responseText) => {
      let result400: any = null;
      result400 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException("Bad Request(Indicates that the server could not understand the request due to invalid syntax.)", status, _responseText, _headers, result400);
    });
  } else if (status === 500) {
    return response.text().then((_responseText) => {
      let result500: any = null;
      result500 = _responseText === "" ? null : (JSON.parse(_responseText) as MultifrontTypes.ZnodeErrorDetail);
      return throwException("Internal Server Error( Indicates that an error occurred on the server while creating the order payment.)", status, _responseText, _headers, result500);
    });
  } else if (status !== 200 && status !== 204) {
    return response.text().then((_responseText) => {
      return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    });
  }
  return Promise.resolve<any>(null as any);
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any }, result?: any): any {
  try {
    if (result !== null && result !== undefined) throw result;
    else throw new Error(message);
  } catch (ex) {
    const parsedRes = response === "" ? null : (JSON.parse(response) as any);
    return parsedRes;
  }
}
